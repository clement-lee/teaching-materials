\documentclass[a4paper]{article}
\usepackage[top=2cm,bottom=2cm,right=2.5cm,left=2.5cm]{geometry} % don't change the margins
\usepackage{hyperref} % for url
\usepackage[comma]{natbib} % for references
\usepackage{amsmath}

\title{Coursework / Project / Final Assignment}
\author{YOUR STUDENT ID AND/OR NAME HERE}
\date{DATE HERE}
\begin{document}
\maketitle

<<echo=FALSE, message=FALSE>>=
knitr::opts_chunk$set(echo=FALSE) # no need to include R code in the pdf file, although the R code is still needed in THIS file
## load your libraries here
library(tidyverse)
@

\section{Introduction}
Here's a checklist of things to do:

\begin{enumerate}
\item \textbf{Header}: Include your student ID in \verb`author:`, and generate a pdf document. If you want to \textbf{reference} figures, you will also need to change the output from \verb`pdf_document` to \verb`bookdown::pdf_document2`.
\item \textbf{Captions}: Even if you don't reference figures in your report, you have to \textbf{caption} them. See the examples below for captioning and working with figures.
\item \textbf{References}: Remember to cite the references. For citing references in an Rmd file, see \url{https://rmarkdown.rstudio.com/authoring_bibliographies_and_citations.html}
\item \textbf{External figures}: You can include external figures or diagrams if they cannot be created directly using R code. For example, you may want to include diagrams explaining the method(s) that you find on the Internet. You can use \verb`knitr::include_graphics()` to do so, and you need to include the graphic file in the zip to be submitted.
\item \textbf{R code}: Do not submit a separate R script for generating the numbers / figures / tables in the report. Insert R code chunks in the Rmd file to dynamically generate the results. There is no need to print the R code in the report, as long as it is in the Rmd file. This can be achieved by the chunk option \verb`echo=FALSE`. The other useful options are \verb`message=FALSE` (to suppress the messages from R e.g. those messages about conflicts when you load \verb`tidyverse`), \verb`include=FALSE` (to suppress printing the results). See \url{https://yihui.org/knitr/options/} for a full list of options.
\end{enumerate}

\section{Methods}
In this project I explored the method by \cite{islr}. Here's an equation for the method:

$$ \pi = 3.141592\dots $$
And Figure \ref{fig:flowchart} (from https://xkcd.com/518/) is the flow chart of the method:

<<flowchart, out.width="45%", fig.align="center", fig.cap="flowchart about flowcharts.">>=
knitr::include_graphics("flow_charts.png")
@

\section{Theory}

\subsection*{(a)}
Use align* environment if you want to align the equations using the \& symbol. Use align environment if you also want equation numbers on the right (try removing the * in the Rnw file and see what happens).

The likelihood is 
\begin{align*}
  L(\boldsymbol{y}|\theta) &= \prod_{i=1}^np(y_i) \\
  &= \prod_{i=1}^ni \\
  &= n!
\end{align*}

\subsection*{(b)}
You can also use the equation environment if there's no need for alignment. Make sure the line in the generated document is not too long.

The log-likelihood is
\begin{equation}
  l(\boldsymbol{y}|\theta) = \log n! = \sum_{i=1}^n \log i, \label{eqn.loglik}
\end{equation}
and you can use equation \ref{eqn.loglik} for subsequent calculations. Observe the use of \verb`\log`, not \verb`log`, in equations. The same goes for \verb`\exp`.

Use \verb`\label{}` \& \verb`\ref{}` in equation or align environment in the Rnw file when you want to label and reference equations later.

\subsection*{(c)}
You can also type equations using \verb`\[` and \verb`\]`, or a pair of double dollar signs \$\$ in the source file. See the alternative in the line that is commented out in the source file.

The score is 
\[ S(\boldsymbol{y}|\theta) = \frac{d}{d\theta} l(\boldsymbol{y}|\theta) = \frac{d}{d\theta} \log{}n! = 0\]
% $$ S(\boldsymbol{y}|\theta) = \frac{d}{d\theta} l(\boldsymbol{y}|\theta) = \frac{d}{d\theta} \log{}n! = 0$$
Write some text explanation before or after equations if necessary.

\section{Results}
After coding the method in Python, the results are saved. Figure \ref{fig:cars} shows the results:

<<cars, fig.cap="The results.", out.width="80%", fig.align="center", fig.pos="h", fig.asp = 0.7>>=
plot(cars)
@

You may need to use R code in the source file, but it's not required in the generated file. You can make the R code and messages invisible in the pdf using the options \verb`echo=FALSE` and \verb`message=FALSE`, respectively, in the code chunk.

<<echo = FALSE, message = FALSE, fig.asp = 0.7>>=
library(tibble)
library(ggplot2)
n0 <- 50
df0 <- tibble(x = seq(n0), y = log(x))
ggplot(df0) + geom_line(aes(x, y))
@

You can also obtain inline results using \verb`\Sexpr{}` in the source file. For example, the number of points used for the plot is $\Sexpr{n0}$. You can use it in equations environment too:

$$ n = \Sexpr{n0} $$

\section{Conclusion}
I successfully implemented the method.

\bibliographystyle{agsm}
\bibliography{references.bib}

\end{document}
